@mixin animation($animate...) {
  $max: length($animate);
  $animations: '';

  @for $i from 1 through $max {
      $animations: #{$animations + nth($animate, $i)};

      @if $i < $max {
          $animations: #{$animations + ", "};
      }
  }
  -webkit-animation: $animations;
  -moz-animation:    $animations;
  -o-animation:      $animations;
  animation:         $animations;
}

@mixin keyframes($animationName) {
  @-webkit-keyframes #{$animationName} {
      @content;
  }
  @-moz-keyframes #{$animationName} {
      @content;
  }
  @-o-keyframes #{$animationName} {
      @content;
  }
  @keyframes #{$animationName} {
      @content;
  }
}

@mixin remove-tap-highlight {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-tap-highlight-color: transparent; // For some Androids
}

@mixin text-size-adjust($value: 100%) {
  -moz-text-size-adjust: $value;
  -ms-text-size-adjust: $value;
  -webkit-text-size-adjust: $value;
  text-size-adjust: $value;
}

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

@mixin box-size-all {
  * {
    @include box-sizing(border-box);

    &:before, &:after {
      @include box-sizing(border-box);
    }
  }
}

@mixin blur($value: 4px) {
  -webkit-filter: blur($value);
  -o-filter: blur($value);
  -ms-filter: blur($value);
  filter: blur($value);
}

@mixin button($color: #337ab8, $text: 0.8rem, $padding: 0.25em 0.6em) {
  //border
  $hue1: $color;
  //color
  $hue2: darken($hue1, 6%);
  //bg color
  $hue3: lighten(saturate($hue1, 10%), 25%);
  //box-shadow 1 and active box-shadow 1
  $hue4: lighten(saturate($hue1, 10%), 5%);
  //box-shadow 2, text-shadow, active bg color (shine)
  $hue5: lighten(saturate($hue1, 80%), 40%);
  //Hover bg color
  $hue6: lighten(saturate($hue1, 5%), 35%);
  //Hover Inset Shadow
  $hue7: lighten(saturate($hue1, 20%), 13%);
  //Top Inset Shadow on Active
  $hue8: lighten($hue1, 50%);

  @include appearance(none);
  @include box-shadow($hue4 0 -20px 35px -7px inset, $hue5 0 2px 6px 0px inset);
  @include border-radius($border-radius);
  outline: none;
  display: inline-block;
  background-color: $hue3;
  border: 1px solid $hue1;
  font-family: "century gothic", sans-serif;
  font-size: $text;
  padding: $padding;
  color: $hue2 !important;
  text-shadow: 0 0 10px $hue3, 0px 1px 2px $hue5;
  text-decoration: none;
  position: relative;
  font-weight: bold;
  text-transform: uppercase;
  margin-right: 15px;
  cursor: pointer;
  min-width: 11em;
  color: red;

  form & {
    min-width: 5.5em;
    margin-right: 0;
  }

  $highlight: $hue7 0 -20px 30px -2px inset, #FFF 0 2px 4px -2px inset;

  &:before{
    content: "";
    @include background-image(linear-gradient(rgba(0, 0, 0, .1), rgba(0, 0, 0, .2)));
    position: absolute;
    width: 100%;
    height: 48%;
    left: 0; right: 0; bottom: 0;
  }

  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:focus {
    @include box-shadow($highlight);
    background-color: $hue6;
  }

  &:active {
    @include box-shadow($highlight);
    @include transform(translateY(.08em) scale(0.99, 0.99));
  }

  &.full-width {
    width: 100%;
    padding: 0.55em 0.6em;
  }

  &.basic {
    @include box-shadow(none);
    @include text-shadow(none);
    background-color: transparent;
    border: none;
    color: #333;
    min-width: 0;
    margin: 0;
    z-index: 100;

    &:active {
      @include transform(none);
    }

    &:before {
      background-image: none;
    }
  }
}

@mixin mobile-smooth-scroll {
  overflow: scroll;
  overflow-x: hidden;
  -webkit-overflow-scrolling: touch;
}

@mixin two-col($width_1: 50%, $width_2: 50%) {
  > * {
    display: inline-block;
  }
  .col:nth-of-type(1) { width: $width_1; }
  .col:nth-of-type(2) { width: $width_2; }
}

@mixin border-top-serrated($size, $color-outer) {
  & {
    position: relative;
    overflow: auto;
    padding-top: $size;
  }
  &:before {
    top: 0px;
    background-position: left top;
    @include background(linear-gradient(-135deg, $color-outer $size / 2, transparent 0), linear-gradient(135deg, $color-outer $size / 2, transparent 0));
    @include border-serrated-helper($size, $color-outer);
  }
}
@mixin border-bottom-serrated($size, $color-outer) {
  & {
    position: relative;
    overflow: auto;
    padding-bottom: $size;
  }
  &:after {
    bottom: 0px;
    background-position: left bottom;
    @include background(linear-gradient(-45deg, $color-outer $size / 2, transparent 0), linear-gradient(45deg, $color-outer $size / 2, transparent 0));
    @include border-serrated-helper($size, $color-outer);
  }
}

@mixin border-serrated-helper($size, $color-outer) {
  content: " ";
  display: block;
  position: absolute;
  left: 0px;
  width: 100%;
  height: $size;
  background-repeat: repeat-x;
  background-size: $size $size;
}

@mixin respond-to($breakpoint) {
  @if $breakpoint == "small" {
    @media (min-width: 580px) {
      @content;
    }
  }

  @else if $breakpoint == "medium" {
    @media (min-width: 800px) {
      @content;
    }
  }

  @else if $breakpoint == "large" {
    @media (min-width: 1200px) {
      @content;
    }
  }
}

@mixin create-property($custom_args, $defaults) {
  @each $property, $value in $defaults {
    @if ($custom_args != "" and map-has-key($custom_args, $property)) {
      #{$property}: map-get($custom_args, $property);
    } @else {
      #{$property}: map-get($defaults, $property);
    }
  }
}

@mixin section-header($custom_args: "") {
  @include create-property(
    $custom_args,
    $section_header_defaults
  );

  padding: rhythm(.25) 0;
  margin-bottom: rhythm(1);
  border: 1px solid gray;
  text-align: center;
  width: 200%;
  margin-left: -50%;
  font-size: 1.3rem;
}

@mixin form($custom_args: "") {
  @include create-property(
    $custom_args,
    $form_defaults
  );

  @include border-radius($border-radius);
  @include mobile-smooth-scroll;
  display: block;
  margin: rhythm(1) auto 0;
  padding: rhythm(1)*.5;
  text-align: left;

  h2 {
    font-size: 1.2rem;
    text-align: center;
  }

  p {
    color: $darkgray;
    font-size: 0.8rem;
    margin: 0.75rem 0;
  }

  .terms {
    margin-top: 0;
  }
}

@mixin form-label($font-size: 0.75rem) {
  font-size: $font-size;
  cursor: pointer;

  &[data-required=true] {
    &:after {
      content: 'required';
      color: red;
      float: right;
    }
  }
}

@mixin transitions-off {
  -moz-transition: none !important;
  -webkit-transition: none !important;
  -o-transition: color 0 ease-in !important;
  transition: none !important;
}
